name: Azure Pipelines
variables:
  - group: eqr-variables
stages:
- stage: Infrastructure
  jobs:
  - job: Terraform
    pool:
      name: Hosted Ubuntu 1604
    steps:
    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0 #TerraformInstaller@0 #charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraformâ€‹-installer.TerraformInstaller@0
      displayName: Install Terraform
      inputs:
        terraformVersion: '0.15.4'
    #Terraform init
    - task: TerraformTaskV1@0
      displayName: 'Terraform Init'
      inputs:
        provider: 'azurerm'
        command: 'init'
        backendServiceArm: '$(sp_display_name)'
        backendAzureRmResourceGroupName: '$(resource_group_name)'
        backendAzureRmStorageAccountName: '$(storage_account_name)'
        backendAzureRmContainerName: '$(container_name)'
        backendAzureRmKey: '$(key)'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
    #Terraform plan
    - task: TerraformTaskV1@0
      displayName: 'Terraform Plan'
      inputs:
        provider: 'azurerm'
        command: 'plan'
        environmentServiceNameAzureRM: '$(sp_display_name)'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
    #Terraform apply
    - task: TerraformTaskV1@0
      displayName: 'Terraform Apply'
      inputs:
        provider: 'azurerm'
        command: 'plan'
        environmentServiceNameAzureRM: '$(sp_display_name)'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
    # - task: Bash@3
    #   displayName: 'Test variables'
    #   inputs:
    #     targetType: 'inline'
    #     script: |
    #       echo $(test)

- stage: Build
  jobs:
  - job: ArtifactFakeRestAPI
    displayName: Artifact FakeRestAPI
    pool:
      name: Hosted Ubuntu 1604
    steps:
    # Needed for Terraform VM deployment
    # - task: InstallSSHKey@0
    #   inputs:
    #     knownHostsEntry: 'KNOWN_HOSTS_STRING'
    #     sshPublicKey: 'PUBLIC_KEY'
    #     sshKeySecureFile: 'id_rsa'
    - task: ArchiveFiles@2
      displayName: 'Archive FakeRestAPI'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/fakerestapi'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip
      displayName: 'Upload Package'
      artifact: drop-fakerestapi

- stage: Deploy
  jobs:
  - deployment: FakeRestAPI
    displayName: 'WebApp FakeRestAPI'
    pool:
      vmImage: 'Ubuntu-16.04'
    environment: 'TEST'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            displayName: 'Deploy FakeRestAPI to Azure Web App'
            inputs:
              azureSubscription: 'eqr-sp'
              appName: 'eqr-AppService-AppService'
              appType: webApp
              package: $(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip


- stage: Test
  jobs:
  - job: IntegrationTests
    displayName: Integration Tests
    pool:
      name: Hosted Ubuntu 1604
    steps:
    - task: CmdLine@2
      displayName: Install Newman
      inputs:
        script: 'sudo npm install -g newman'
        workingDirectory: $(System.DefaultWorkingDirectory)
    - task: CmdLine@2
      displayName: Run Regression Tests
      continueOnError: true
      inputs:
        script: 'newman run ./automatedtesting/postman/regression.json --reporters cli,junit --reporter-junit-export ./automatedtesting/postman/TEST-regression.xml'
        workingDirectory:  $(System.DefaultWorkingdirectory)
    - task: CmdLine@2
      displayName: Run Validation Tests
      continueOnError: true
      inputs:
        script: 'newman run ./automatedtesting/postman/validation.json --reporters cli,junit --reporter-junit-export ./automatedtesting/postman/TEST-validation.xml'
        workingDirectory: $(System.DefaultWorkingdirectory)
    - task: PublishTestResults@2
      displayName: Publish Test Results
      inputs:
        testResultsFiles: '**/TEST-*.xml' 
        searchFolder: '$(System.DefaultWorkingDirectory)/automatedtesting/postman/' # Optional
        #mergeTestResults: false # Optional
        #failTaskOnFailedTests: false # Optional
        #testRunTitle: # Optional
        #buildPlatform: # Optional
        #buildConfiguration: # Optional
        publishRunAttachments: true # Optional
  - job: PerformanceTests
    displayName: Performance Tests
    pool:
      name: Hosted Ubuntu 1604
    steps:
    - task: JMeterInstaller@0
      displayName: 'Install JMeter'
      inputs:
        jmeterVersion: '5.4.1'
    - task: Bash@3
      displayName: 'Run Stress Test'
      inputs:
        targetType: 'inline'
        script: |
          jmeter -n -t ./automatedtesting/jmeter/stress.jmx -l ./automatedtesting/jmeter/StressReports/results.jtl -e -o ./automatedtesting/jmeter/StressReports
    - task: publishhtmlreport@1
      displayName: 'Publish Stress Test Results'
      inputs:
        htmlType: 'OtherComplexReport'
        JmeterReportsPath: './automatedtesting/jmeter/StressReports'
    - task: Bash@3
      displayName: 'Run Endurance Test'
      inputs:
        targetType: 'inline'
        script: |
          jmeter -n -t ./automatedtesting/jmeter/endurance.jmx -l ./automatedtesting/jmeter/EnduranceReports/results.jtl -e -o ./automatedtesting/jmeter/EnduranceReports
    - task: publishhtmlreport@1
      displayName: 'Publish Endurance Test Results'
      inputs:
        htmlType: 'OtherComplexReport'
        JmeterReportsPath: './automatedtesting/jmeter/EnduranceReports'

  - job: UITests
    displayName: UI Tests
    steps:
    - task: Bash@3
      displayName: 'Setup VM'
      inputs:
        targetType: 'inline'
        script: |
          #! /bin/bash
          sudo apt-get upgrade -y
          sudo apt-get install python3-pip -y
          sudo apt-get install unzip -y
    - task: Bash@3
      displayName: 'Install Selenium, Chromium & chromedriver'
      inputs:
        targetType: 'inline'
        script: |
          #install chromium & selenium
          sudo apt-get install -y chromium-browser
          pip3 install selenium
          
          #install chromedriver & export path
          if [ ! -f $(Pipeline.Workspace)/chromedriver ]; then
            wget https://chromedriver.storage.googleapis.com/90.0.4430.24/chromedriver_linux64.zip
            unzip chromedriver_linux64.zip
          fi
          export PATH=$PATH:$(Pipeline.Workspace)/chromedriver
    - task: Bash@3
      displayName: 'Run UI test'
      inputs:
        targetType: 'inline'
        script: |
          #unzip -o $(Pipeline.Workspace)/Selenium/selenium.zip -d .
          python3 ./automatedtesting/selenium/ui.py