name: Azure Pipelines
variables:
  python.version: '3.7.6'
stages:

# - stage: Infrastructure
#   jobs:
#   - job: Terraform TODO

- stage: Build
  jobs:
  - job: FakeRestAPI
    pool:
      name: Hosted Ubuntu 1604
    steps:
    # Needed for Terraform VM deployment
    # - task: InstallSSHKey@0
    #   inputs:
    #     knownHostsEntry: 'KNOWN_HOSTS_STRING'
    #     sshPublicKey: 'PUBLIC_KEY'
    #     sshKeySecureFile: 'id_rsa'
    - task: ArchiveFiles@2
      displayName: 'Archive FakeRestAPI'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/fakerestapi'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip
      displayName: 'Upload Package'
      artifact: drop-fakerestapi

- stage: Deploy
  jobs:
  - deployment: FakeRestAPI
    pool:
      vmImage: 'Ubuntu-16.04'
    environment: 'TEST'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            displayName: 'Deploy FakeRestAPI to Azure Web App'
            inputs:
              azureSubscription: 'eqr-sp'
              appName: 'eqr-AppService-AppService'
              appType: webApp
              package: $(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip
  - deployment: VMDependencies
    displayName: 'Deploy VM dependencies'
    environment:
      name:  'TEST'
      #resourceType: VirtualMachine
      #tags: TAG NAME
    strategy:
      runOnce:
        deploy:
          steps:
          - task: Bash@3
            displayName: 'Setup VM'
            inputs:
              targetType: 'inline'
              script: |
                #! /bin/bash
                
                sudo apt-get upgrade -y
                sudo apt-get install python3-pip -y
                sudo apt-get install unzip -y
          - task: Bash@3
            displayName: 'Install Selenium, Chromium & chromedriver'
            inputs:
              targetType: 'inline'
              script: |
                #install chromium & selenium
                sudo apt-get install -y chromium-browser
                pip3 install selenium
                
                #install chromedriver & export path
                if [ ! -f $(Pipeline.Workspace)/chromedriver ]; then
                  wget https://chromedriver.storage.googleapis.com/92.0.4515.43/chromedriver_linux64.zip
                  unzip chromedriver_linux64.zip
                fi
                export PATH=$PATH:$(Pipeline.Workspace)/chromedriver
          - task: CmdLine@2
            displayName: Install Newman
            inputs:
              script: 'sudo npm install -g newman'
              workingDirectory: $(System.DefaultWorkingDirectory)
          - task: CmdLine@2
            displayName: Run Regression Tests
            continueOnError: true
            inputs:
              script: 'newman run automatedtesting/postman/StarterAPIs.json'
              workingDirectory: '$(System.DefaultWorkingDirectory)'

                #install jmeter