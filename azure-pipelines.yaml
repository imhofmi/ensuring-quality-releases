name: Azure Pipelines
variables:
  python.version: '3.7.6'
stages:

# - stage: Infrastructure
#   jobs:
#   - job: Terraform TODO

- stage: Build
  jobs:
  - job: FakeRestAPI
    pool:
      name: Hosted Ubuntu 1604
    steps:
    # Needed for Terraform VM deployment
    # - task: InstallSSHKey@0
    #   inputs:
    #     knownHostsEntry: 'KNOWN_HOSTS_STRING'
    #     sshPublicKey: 'PUBLIC_KEY'
    #     sshKeySecureFile: 'id_rsa'
    - task: ArchiveFiles@2
      displayName: 'Archive FakeRestAPI'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/fakerestapi'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip
      displayName: 'Upload Package'
      artifact: drop-fakerestapi
  - job: UITests
    pool:
      name: Hosted Ubuntu 1604
    steps:
    - task: ArchiveFiles@2
      displayName: 'Archive UI test files'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/selenium'
        includeRootFolder: false
        archiveType: zip
        archiveFile: $(Build.ArtifactStagingDirectory)/selenium.zip
        replaceExistingArchive: true
    - upload: $(Build.ArtifactStagingDirectory)/selenium.zip
      artifact: Selenium 
  - job: IntegrationTests
    pool:
      name: Hosted Ubuntu 1604
    steps:
    - task: CmdLine@2
      displayName: Install Newman
      inputs:
        script: 'sudo npm install -g newman'
        workingDirectory: $(System.DefaultWorkingDirectory)
    - task: CmdLine@2
      displayName: Run Regression Tests
      continueOnError: true
      inputs:
        script: 'newman run ./automatedtesting/postman/regression.json --reporters cli,junit --reporter-junit-export ./automatedtesting/postman/TEST-regression.xml'
        workingDirectory:  $(System.DefaultWorkingdirectory)
    - task: CmdLine@2
      displayName: Run Validation Tests
      continueOnError: true
      inputs:
        script: 'newman run ./automatedtesting/postman/validation.json --reporters cli,junit --reporter-junit-export ./automatedtesting/postman/TEST-validation.xml'
        workingDirectory: $(System.DefaultWorkingdirectory)
    - task: PublishTestResults@2
      displayName: Publish Test Results
      inputs:
        testResultsFiles: '**/TEST-*.xml' 
        searchFolder: '$(System.DefaultWorkingDirectory)/automatedtesting/postman/' # Optional
        #mergeTestResults: false # Optional
        #failTaskOnFailedTests: false # Optional
        #testRunTitle: # Optional
        #buildPlatform: # Optional
        #buildConfiguration: # Optional
        publishRunAttachments: true # Optional
    

- stage: Deploy
  jobs:
  - deployment: FakeRestAPI
    pool:
      vmImage: 'Ubuntu-16.04'
    environment: 'TEST'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            displayName: 'Deploy FakeRestAPI to Azure Web App'
            inputs:
              azureSubscription: 'eqr-sp'
              appName: 'eqr-AppService-AppService'
              appType: webApp
              package: $(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip
  - deployment: VMDependencies
    displayName: 'Deploy VM dependencies'
    environment:
      name:  'TEST'
      #resourceType: VirtualMachine
      #tags: TAG NAME
    strategy:
      runOnce:
        deploy:
          steps:
          - task: Bash@3
            displayName: 'Setup VM'
            inputs:
              targetType: 'inline'
              script: |
                #! /bin/bash
                sudo apt-get upgrade -y
                sudo apt-get install python3-pip -y
                sudo apt-get install unzip -y
          - task: Bash@3
            displayName: 'Install Selenium, Chromium & chromedriver'
            inputs:
              targetType: 'inline'
              script: |
                #install chromium & selenium
                sudo apt-get install -y chromium-browser
                pip3 install selenium
                
                #install chromedriver & export path
                if [ ! -f $(Pipeline.Workspace)/chromedriver ]; then
                  wget https://chromedriver.storage.googleapis.com/90.0.4430.24/chromedriver_linux64.zip
                  unzip chromedriver_linux64.zip
                fi
                export PATH=$PATH:$(Pipeline.Workspace)/chromedriver
          - download: current
            displayName: 'Get UI test artifact'
            artifact: Selenium
          - task: Bash@3
            displayName: 'Run UI test'
            inputs:
              targetType: 'inline'
              script: |
                ls -l
          - task: JMeterInstaller@0
            displayName: 'Install JMeter'
            inputs:
              jmeterVersion: '5.4.1'
          - task: Bash@3
            displayName: 'Run stress test'
            inputs:
              targetType: 'inline'
              script: |
                jmeter -n -t $(System.DefaultWorkingDirectory)/automatedtesting/jmeter/stress.jmx -l StressReports/results.jtl -e -o StressReports
          - task: publishhtmlreport@1
            displayName: 'Publish Stress Test Results'
            inputs:
              htmlType: 'JMeter'
              JmeterReportsPath: '$(Build.SourcesDirectory)/StressReports'
          - task: Bash@3
            displayName: 'Run endurance test'
            inputs:
              targetType: 'inline'
              script: |
                jmeter -n -t $(System.DefaultWorkingDirectory)/automatedtesting/jmeter/endurance.jmx -l EnduranceReports/results.jtl -e -o EnduranceReports
          - task: publishhtmlreport@1
            displayName: 'Publish Endurance Test Results'
            inputs:
              htmlType: 'JMeter'
              JmeterReportsPath: '$(Build.SourcesDirectory)/EnduranceReports'
          